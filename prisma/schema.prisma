// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

// generator client {
//     provider = "prisma-client-js"
// }

// datasource db {
// provider = "mysql"
// NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
// Further reading: 
// https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
// url      = env("DATABASE_URL")
//}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    nif           String?   @unique
    email         String    @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(client)
    accounts      Account[]
    sessions      Session[]
    Client        Client?
    Admin         Admin?
    Recipe        Recipe[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//DataBase
model Admin {
    userId String @id
    user   User   @relation(fields: [userId], references: [id])
}

model Client {
    userId          String  @id
    user            User    @relation(fields: [userId], references: [id])
    direction       String?
    numberOfReports Int     @default(0)
    phoneNumber     String?
    points          Int     @default(0)
    // socio  Bool
}

model Edible {
    productId        String         @id
    product          Product        @relation(fields: [productId], references: [id])
    allergen         Allergen
    Ingredient       Ingredient[]
    nutritionFacts   NutritionFacts @relation(fields: [nutritionFactsId], references: [id])
    nutritionFactsId String         @unique
    priceByWeight    Float
}

model Ingredient {
    id               String             @id
    edible           Edible             @relation(fields: [edibleProductId], references: [productId])
    name             String
    RecipeIngredient RecipeIngredient[]
    edibleProductId  String
}

model NonEdible {
    productId String  @id
    product   Product @relation(fields: [productId], references: [id])
    price     Float
}

model NutritionFacts {
    id     String  @id
    // P G H / Kcal
    Edible Edible?
}

model Order {
    id           String         @id
    dateTime     DateTime
    price        String
    ProductOrder ProductOrder[]
}

model Product {
    id          String         @id
    description String
    Edible      Edible[]
    imageURL    String
    name        String
    NonEdible   NonEdible[]
    orders      ProductOrder[]
    stock       Float
}

model ProductOrder {
    order     Order   @relation(fields: [orderId], references: [id])
    amount    Float
    orderId   String
    product   Product @relation(fields: [productId], references: [id])
    productId String

    @@id([orderId, productId])
}

model Recipe {
    id               String             @id
    name             String
    directions       String
    RecipeIngredient RecipeIngredient[]
    userId           String
    user             User               @relation(fields: [userId], references: [id])
}

model RecipeIngredient {
    amount       Float
    ingredientId String
    ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
    recipeId     String
    recipe       Recipe     @relation(fields: [recipeId], references: [id])

    @@id([recipeId, ingredientId])
}

model SuggestionForm {
    id          String         @id
    description String
    title       String
    type        SuggestionType
}

//Enumerables

enum Allergen {
    celery
    cereals
    crustaceans
    eggs
    fish
    milk
    molluscs
    mustard
    nuts
    lupin
    peanuts
    sesameSeeds
    soybeans
    sulphurDioxideAndSulphites
}

enum Role {
    admin
    client
}

enum SuggestionType {
    store
    website
}
