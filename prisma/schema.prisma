// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

// generator client {
//     provider = "prisma-client-js"
// }

// datasource db {
// provider = "mysql"
// NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
// Further reading: 
// https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
// url      = env("DATABASE_URL")
//}

enum Role {
    client
    admin
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    nif           String?   @unique
    email         String    @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(client)
    accounts      Account[]
    sessions      Session[]
    Client        Client?
    Admin         Admin?
}

model Client {
    userId          String  @id
    user            User    @relation(fields: [userId], references: [id])
    direction       String?
    points          Int     @default(0)
    // socio  Bool
    phoneNumber     String?
    numberOfReports Int     @default(0)
}

model Admin {
    userId String @id
    user   User   @relation(fields: [userId], references: [id])
}

model Order {
    id           String         @id
    price        String
    dateTime     DateTime
    ProductOrder ProductOrder[]
}

model ProductOrder {
    order     Order   @relation(fields: [orderId], references: [id])
    orderId   String
    product   Product @relation(fields: [productId], references: [id])
    productId String
    amount    Float

    @@id([orderId, productId])
}

model Product {
    id          String         @id
    name        String
    imageURL    String
    description String
    stock       Float
    orders      ProductOrder[]
    Edible      Edible[]
    NonEdible   NonEdible[]
}

model Edible {
    productId        String         @id
    product          Product        @relation(fields: [productId], references: [id])
    allergen         Allergen
    priceByWeight    Float
    nutritionFacts   NutritionFacts @relation(fields: [nutritionFactsId], references: [id])
    nutritionFactsId String         @unique
}

model NutritionFacts {
    id     String  @id
    // P G H / Kcal
    Edible Edible?
}

model NonEdible {
    productId    String   @id
    product      Product  @relation(fields: [productId], references: [id])
    allergen     Allergen
    price        Float //per Kg
    conservation String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Allergen {
    Cereals
    Crustaceans
    Eggs
    Fish
    Peanuts
    Soybeans
    Milk
    Nuts
    Celery
    Mustard
    SesameSeeds
    SulphurDioxideAndSulphites
    Lupin
    Molluscs
}
